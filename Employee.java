import java.time.LocalDate;


/**
 * The employee class is made up of a combination of data and methods inherited from the person class together with
 * the data and methods specifically for employees. Other than the data inherited, the additional data are salary,
 * date which they are employed and their working schedule. The schedule of the employee is up-to-date and purposed
 * to allow time slot reservation by the customers. All this data are stored in the class as different records
 * specified by different ID generated by the system.
 * The display of the employeesâ€?information will take place when the users request or in the necessary situation.
 * The employee class too stored the total number of employees in the pet shop, providing more details to the
 * owner.
 *
 * @author Chan Jia Wei
 */
public class Employee extends Person implements Displayable, Identifiable {

    private double salary;
    private LocalDate startWorkDate;
    private Schedule workSchedule = new Schedule();
    private static int totalEmpCount;
    private static int currentEmployeeCount;

    // Constructor
    Employee() {
        // no-args
        this.startWorkDate = LocalDate.now();
        totalEmpCount++;
        currentEmployeeCount++;
        this.age = (LocalDate.now().getYear() - dob.getYear());
        this.id = generateID(currentEmployeeCount);
    }

    /**
     * Creates a {@code Employee} class object when called
     *
     * @param firstName Employee first name
     * @param lastName Employee last name
     * @param tel Employee phone number
     * @param gender Employee gender
     * @param dob Employee date of birth
     * @param address Employee housing address
     * @param email Employee email address
     * @param username Employee username
     * @param password Employee password
     * @param salary Employee salary
     */
    Employee(String firstName, String lastName, String tel, char gender, LocalDate dob, Address address, String email, String username, String password, double salary) {
        super(firstName, lastName, tel, gender, dob, address, email, username, password);
        this.salary = salary;
        this.age = (LocalDate.now().getYear() - dob.getYear());
        this.startWorkDate = LocalDate.now();
        totalEmpCount++;
        currentEmployeeCount++;
        this.id = generateID(currentEmployeeCount);
    }

    // Getter & Setter
    public static int getCurrentEmployeeCount() {
        return currentEmployeeCount;
    }

    public static void setCurrentEmployeeCount(int currentEmployeeCount) {
        Employee.currentEmployeeCount = currentEmployeeCount;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    public LocalDate getStartWorkDate() {
        return startWorkDate;
    }

    public void setStartWorkDate(LocalDate startWorkDate) {
        this.startWorkDate = startWorkDate;
    }

    public Schedule getWorkSchedule() {
        return workSchedule;
    }

    public void setWorkSchedule(Schedule workSchedule) {
        this.workSchedule = workSchedule;
    }

    public static int getTotalEmpCount() {
        return totalEmpCount;
    }

    public static void setTotalEmpCount(int totalEmpCount) {
        Employee.totalEmpCount = totalEmpCount;
    }

    // Methods

    /**
     * Overrides the {@code displayRow()} method in {@code Displayable} interface.
     *
     * @return Formatted {@code Employee} attribute in row
     */
    @Override
    public String displayRow() {
        return String.format("""
        	  | %6s |%-6s %-10s| %3s   |   %c    |  %11s   | %s |%-12s|%-30s| %-15s|   %s  |%-60s|""",
                getID(),
                getLastName(),
                getFirstName(),
                getAge(),
                getGender(),
                getTel(),
                Main.dateToString(getDob()),
                Main.convertCurrency(getSalary()),
                getEmail(),
                getUsername(),
                Main.dateToString(getStartWorkDate()),
                getAddress().displayRow());
    }

    /**
     * Overrides the {@code toString()} method in {@code Object}.
     *
     * @return formatted {@code Employee} attributes
     */
    @Override
    public String toString() {
        return String.format("""
        	       ID : %s
        	      +--------------------------------------------------------------------------+
        	      |                                    |                                     |
        	      |   First Name > %-20s|   Age        > %-4s                 |
        	      |   Last Name  > %-20s|   Gender     > %c                    |
        	      |	                                   |   Phone No.  > %-12s         |
        	      |                                    |   Birth Date > %-8s           |
        	      |--------------------------------------------------------------------------|
        	      |                                                                          |
        	      |                                        Register Date > %-10s        |
        	      |                                                                          |
        	      |   Salary   > %-10s                                                 |
        	      |   Username > %-20s                                        |
        	      |   Email    > %-30s                              |
        	      |   Address  > %-60s|
        	      |                                                                          |
        	      +--------------------------------------------------------------------------+
        	   	""",
                getID(),
                getFirstName(),
                getAge(),
                getLastName(),
                getGender(),
                getTel(),
                Main.dateToString(getDob()),
                Main.dateToString(getStartWorkDate()),
                Main.convertCurrency(getSalary()),
                getUsername(),
                getEmail(),
                getAddress().displayRow());
    }

    /**
     * Overrides the {@code generateID()} method in {@code Identifiable} interface.
     *
     * @param count The current {@code Employee} object total count
     * @return A formatted ID with employee in abbreviation at the front, current {@code Employee} count at the back
     */
    @Override
    public String generateID(int count){
        String additionalZero = "";
        String idNum = String.valueOf(count);
        if(idNum.length() == 1){
            additionalZero = "0000";
        }
        else if (idNum.length() == 2){
            additionalZero = "000";
        }
        else if (idNum.length() == 3){
            additionalZero = "00";
        }
        else if (idNum.length() == 4){
            additionalZero = "0";
        }
        return "E" + additionalZero + idNum;
    }

    /**
     * Overrides the {@code equals()} method in {@code Object} and {@code Person}.
     *
     * @param o Object to be compared
     * @return True if equals, else return false
     */
    /*
    @Override
    public boolean equals(Object o) {
        if (o instanceof Employee employee) {
            return employee.equals(this);
        }
        return false;
    }
     */
}
