import java.time.LocalDate;


/**
 * The owner class is made up of a combination of data and methods inherited from the person class together with
 * the data and methods specifically for the owner. Other than the data inherited, the additional data is the date
 * which the owner started to own the pet shop. Different owners records will be stored separately on different ID,
 * which will be generated by the system once the record is created.
 * The display of the ownerâ€™s information will take place when the users request or in the necessary situation.
 * The owner class too stored the total number of owners in the pet shop, providing more details.
 *
 * @author Chan Jia Wei
 */
public class Owner extends Person implements Identifiable {
    private LocalDate startWorkDate;
    private static int totalOwnerCount;
    private static int currentOwnerCount;

    // Constructor
    Owner() {
        // no-args
        this.startWorkDate = LocalDate.now();
        this.age = (LocalDate.now().getYear() - dob.getYear());
        currentOwnerCount++;
        totalOwnerCount++;
        this.id = generateID(currentOwnerCount);
    }

    /**
     * Creates a {@code Owner} class object when called
     *
     * @param firstName Owner first name
     * @param lastName Owner last name
     * @param tel Owner phone number
     * @param gender Owner gender
     * @param dob Owner date of birth
     * @param address Owner housing address
     * @param email Owner email address
     * @param username Owner username
     * @param password Owner password
     */
    Owner(String firstName,
          String lastName,
          String tel,
          char gender,
          LocalDate dob,
          Address address,
          String email,
          String username,
          String password) {
        super(firstName, lastName, tel, gender, dob, address, email, username, password);
        this.startWorkDate = LocalDate.now();
        this.age = (LocalDate.now().getYear() - dob.getYear());
        currentOwnerCount++;
        totalOwnerCount++;
        this.id = generateID(currentOwnerCount);
    }

    // Getter & Setter
    public LocalDate getStartWorkDate() {
        return startWorkDate;
    }

    public void setStartWorkDate(LocalDate startWorkDate) {
        this.startWorkDate = startWorkDate;
    }

    public static int getTotalOwnerCount() {
        return totalOwnerCount;
    }

    public static void setTotalOwnerCount(int totalOwnerCount) {
        Owner.totalOwnerCount = totalOwnerCount;
    }

    public static int getCurrentOwnerCount() {
        return currentOwnerCount;
    }

    public static void setCurrentOwnerCount(int currentOwnerCount) {
        Owner.currentOwnerCount = currentOwnerCount;
    }
    // Methods

    /**
     * Overrides the {@code toString()} method in {@code Object}.
     *
     * @return formatted {@code Owner} attributes
     */
    @Override
    public String toString() {
        return String.format("""
        		ID : %s
        		+--------------------------------------------------------------------------+
        		|                                    |                                     |
        		|   First Name > %-20s|   Age        > %-4s                 |
        		|	Last Name  > %-20s|   Gender     > %c                    |
        		|	                                 |   Phone No.  > %-12s         |
        		|                                    |   Birth Date > %-8s           |
        		|--------------------------------------------------------------------------|
        		|                                                                          |
        		|                                        Register Date > %-10s        |
        		|                                                                          |
        		|   Username > %-20s                                        |
        		|   Email    > %-30s                              |
        		|   Address  > %-20s    |
        		|                                                                          |
        		+--------------------------------------------------------------------------+""",
                getID(),
                getFirstName(),
                getAge(),
                getLastName(),
                getGender(),
                getTel(),
                Main.dateToString(getDob()),
                Main.dateToString(getStartWorkDate()),
                getUsername(),
                getEmail(),
                getAddress().displayRow());
    }

    /**
     * Overrides the {@code generateID()} method in {@code Identifiable} interface.
     *
     * @param count The current {@code Owner} object total count
     * @return A formatted ID with owner in abbreviation at the front, current {@code Owner} count at the back
     */
    @Override
    public String generateID(int count){
        String additionalZero = "";
        String idNum = String.valueOf(count);
        if (idNum.length() == 1){
            additionalZero = "00";
        }
        else if (idNum.length() == 2){
            additionalZero = "0";
        }
        return "MGM" + additionalZero + idNum;
    }

    /**
     * Overrides the {@code equals()} method in {@code Object} and {@code Person}.
     *
     * @param o Object to be compared
     * @return True if equals, else return false
     */
    @Override
    public boolean equals(Object o) {
        if (o instanceof Owner owner) {
            return owner.equals(this);
        }
        return false;
    }
}
